"""
Django settings for shop project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-17#!&c)&q3p2wewrs+d=ciu1vu7b@*+8#r*sonv*^d&1*o-4_w"

# 跨域
SECURE_CROSS_ORIGIN_OPENER_POLICY = None

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*", "localhost", "127.0.0.1"]


# https://docs.djangoproject.com/zh-hans/4.2/ref/settings/
CSRF_TRUSTED_ORIGINS = ["http://XXX.XXX.XXX.XXX"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "gunicorn",
    # "tinymce",  # 富文本编辑器，编辑商品详情
    "ckeditor",  # 富文本编辑器
    "ckeditor_uploader",  # 富文本编辑器上传图片模块
    "app_user",  # 用户模块
    "app_goods",  # 商品模块
    "app_cart",  # 购物车模块
    "app_order",  # 订单模块
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # "middleware.middleware.MyMiddleware",
]

ROOT_URLCONF = "shop.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        # "DIRS": [],  # 设置模板路径，一般不在这里设置，一般在每个应用程序（app）里面放置模板
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "shop.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "db_shop",
        "USER": "root",
        "PASSWORD": "XXXXXX",
        "HOST": "127.0.0.1",
        "PORT": "3306",
        "OPTIONS": {"init_command": "set names utf8mb4;", "charset": "utf8mb4"},
    },
    # "shop": {
    #     "ENGINE": "django.db.backends.mysql",
    #     "NAME": "db_shop",
    #     "USER": "root",
    #     "PASSWORD": "XXXXXX",
    #     "HOST": "127.0.0.1",
    #     "PORT": "3306",
    #     "OPTIONS": {"init_command": "set names utf8mb4;", "charset": "utf8mb4"},
    # },
}

# Django认证系统使用的模型类
# 替换django默认账户
# python manage.py createsuperuser
AUTH_USER_MODEL = "app_user.User"
# 允许自定义验证用户是否激活
AUTHENTICATION_BACKENDS = ["django.contrib.auth.backends.AllowAllUsersModelBackend"]

DATABASE_MAPPING = {
    # "uesr": "shop",
    # "usergroups": "shop",
    # "useruserpermissions": "shop",
    # "address": "shop",
    # "goodstype": "shop",
    # "goodsspu": "shop",
    # "goodssku": "shop",
    # "goodsimage": "shop",
    # "indexgoodsbanner": "shop",
    # "indexpromotionbanner": "shop",
    # "indextypegoodsbanner": "shop",
    # "orderinfo": "shop",
    # "ordergoods": "shop",
}
# DATABASE_ROUTERS = ["common.db_router.DbRouter"]


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = "en-us"
LANGUAGE_CODE = "zh-hans"

# TIME_ZONE = "UTC"
TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"  # 静态文件链接头
if DEBUG:
    STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]  # 静态文件目录
else:
    STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = "media/"  # 媒体文件链接头

MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # 媒体文件目录

# 上传图片保存路径，/MEDIA_URL/CKEDITOR_UPLOAD_PATH/CKEDITOR_RESTRICT_BY_SPUID/CKEDITOR_RESTRICT_BY_USER/CKEDITOR_RESTRICT_BY_DATE
CKEDITOR_UPLOAD_PATH = "detail"
CKEDITOR_RESTRICT_BY_SPUID = True  # 自己修改源码添加的SPUID
CKEDITOR_RESTRICT_BY_USER = False  # 用户文件夹
CKEDITOR_RESTRICT_BY_DATE = False  # 去掉日期层级文件夹

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ================== 富文本编辑器配置-tinymce ================== #
# TINYMCE_DEFAULT_CONFIG = {
#     "theme": "silver",
#     "width": 600,
#     "height": 400,
# }

# ================== 富文本编辑器配置-ckeditor ================== #
CKEDITOR_CONFIGS = {
    # 默认配置
    # 'default': {
    #     'toolbar': 'full',  # 工具条功能
    #     'height': 300,  # 编辑器高度
    #     'width': 800,  # 编辑器宽
    # },
    # 自定义配置带代码块显示
    "default": {
        "toolbar": (
            ["div", "Source", "-", "Save", "NewPage", "Preview", "-", "Templates"],
            [
                "Cut",
                "Copy",
                "Paste",
                "PasteText",
                "PasteFromWord",
                "-",
                "Print",
                "SpellChecker",
                "Scayt",
            ],
            ["Undo", "Redo", "-", "Find", "Replace", "-", "SelectAll", "RemoveFormat"],
            [
                "Form",
                "Checkbox",
                "Radio",
                "TextField",
                "Textarea",
                "Select",
                "Button",
                "ImageButton",
                "HiddenField",
            ],
            ["Bold", "Italic", "Underline", "Strike", "-", "Subscript", "Superscript"],
            ["NumberedList", "BulletedList", "-", "Outdent", "Indent", "Blockquote"],
            ["JustifyLeft", "JustifyCenter", "JustifyRight", "JustifyBlock"],
            ["Link", "Unlink", "Anchor"],
            [
                "Image",
                "Flash",
                "Table",
                "HorizontalRule",
                "Smiley",
                "SpecialChar",
                "PageBreak",
            ],
            ["Styles", "Format", "Font", "FontSize"],
            ["TextColor", "BGColor"],
            ["Maximize", "ShowBlocks", "-", "About", "pbckcode"],
            ["Blockquote", "CodeSnippet"],
        ),
        "width": "auto",
        # 添加按钮在这里
        "toolbar_Custom": [
            ["NumberedList", "BulletedList"],
            ["Blockquote", "CodeSnippet"],
        ],
        # 插件
        "extraPlugins": ",".join(
            [
                "codesnippet",
                "widget",
                "lineutils",
            ]
        ),
    },
}


# ================== 日志 ================== #
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[%(levelname)s %(asctime)s %(name)s %(lineno)d %(process)d %(thread)d] %(message)s"
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "backend_file": {
            "delay": True,
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "%s/log/main.log" % BASE_DIR,  # 日志输出文件
            "when": "D",
            "backupCount": 5,  # 备份份数
            "formatter": "verbose",  # 使用哪种formatters日志格式
            "level": "DEBUG",
        },
        "backend_err_file": {
            "delay": True,
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "%s/log/main_error.log" % BASE_DIR,  # 日志输出文件
            "when": "D",
            "backupCount": 5,  # 备份份数
            "formatter": "verbose",  # 使用哪种formatters日志格式
            "level": "ERROR",
        },
        "order_file": {
            "delay": True,
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "%s/log/order.log" % BASE_DIR,  # 日志输出文件
            "when": "D",
            "backupCount": 5,  # 备份份数
            "formatter": "verbose",  # 使用哪种formatters日志格式
            "level": "DEBUG",
        },
        "order_err_file": {
            "delay": True,
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "%s/log/order_error.log" % BASE_DIR,  # 日志输出文件
            "when": "D",
            "backupCount": 5,  # 备份份数
            "formatter": "verbose",  # 使用哪种formatters日志格式
            "level": "ERROR",
        },
        "pay_file": {
            "delay": True,
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "%s/log/pay.log" % BASE_DIR,  # 日志输出文件
            "when": "D",
            "backupCount": 5,  # 备份份数
            "formatter": "verbose",  # 使用哪种formatters日志格式
            "level": "DEBUG",
        },
        "pay_err_file": {
            "delay": True,
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "%s/log/pay_error.log" % BASE_DIR,  # 日志输出文件
            "when": "D",
            "backupCount": 5,  # 备份份数
            "formatter": "verbose",  # 使用哪种formatters日志格式
            "level": "ERROR",
        },
    },
    "loggers": {
        "django.db.backends": {
            "handlers": ["console"],
            "propagate": False,
            "level": "DEBUG",
        },
        "": {
            "handlers": ["backend_file", "backend_err_file"],
            "level": "INFO",
            "propagate": False,
        },
        "order": {
            "handlers": ["order_file", "order_err_file"],
            "level": "INFO",
            "propagate": False,
        },
        "pay": {
            "handlers": ["pay_file", "pay_err_file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}


# ================== 发邮件 ================== #
# 发送邮件配置
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# smtp服务地址
EMAIL_HOST = "smtp.qq.com"
# 端口号是固定的
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = "XXXXXX"
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = "XXXXXX"
# 收件人看到的发件人
EMAIL_FROM = "XXXXXX"


# ================== Django的缓存配置 ================== #
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "cart": {  # 购物车
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "history": {  # 历史浏览记录
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "celery": {  # celery异步任务
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/11",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}


# ================== 配置session存储 ================== #
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


# ================== 配置登录URL地址 ================== #
LOGIN_URL = "/user/login"


# ================== 支付相关 ================== #
# https://opendocs.alipay.com/open/03k9zr?pathHash=38327ac8
# https://opendocs.alipay.com/open/270/105898
PAY_ALIPAY_TEST = {
    # APPID
    "appid": "XXXXXX",
    # 应用名称
    "appname": "XXXXXX",
    "userid": "XXXXXX",
    # 绑定的商家账号（PID）
    "pid": "",
    # 应用公钥
    "app_public_key": "XXXXXX",
    # 应用私钥
    "app_private_key": "XXXXXX",
    # 支付宝公钥
    "alipay_public_key": "XXXXXX",
    # 支付宝网关地址
    "gateway": "https://openapi-sandbox.dl.alipaydev.com/gateway.do",
    # 应用网关地址
    "app_notify_url": "",
    # 授权回调地址
    "return_url": "",
}


# ================== 域名相关 ================== #
URL = "XXXXXX"
# URL = "XXXXXX"
